{"version":3,"sources":["About.js","Contact.js","Home.js","Login.js","Signup.js","Account.js","App.js","index.js"],"names":["About","Contact","Home","Login","history","useHistory","email","localStorage","getItem","token","push","IsLoggedIn","useState","setEmail","password","setPassword","setMessage","onSubmit","e","preventDefault","console","log","myData","fetch","method","headers","body","JSON","stringify","then","result","status","json","Object","keys","length","setItem","window","location","reload","catch","err","type","value","onChange","target","className","placeholder","required","Signup","fName","setFName","lName","setLName","signupData","Account","removeItem","isLoggedIn","App","loginStatus","to","onClick","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3a6a49ad.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction About(){\r\n    return(\r\n        <div>\r\n            <h3>About</h3>\r\n            <p>\r\n            Generating random paragraphs can be an excellent way for writers to get their creative flow going at the beginning of the day. The writer has no idea what topic the random paragraph will be about when it appears. This forces the writer to use creativity to complete one of three common writing challenges. The writer can use the paragraph as the first one of a short story and build upon it. A second option is to use the random paragraph somewhere in a short story they create. The third option is to have the random paragraph be the ending paragraph in a short story. No matter which of these challenges is undertaken, the writer is forced to use creativity to incorporate the paragraph into their writing.\r\n\r\nTackle Writers' Block\r\nA random paragraph can also be an excellent way for a writer to tackle writers' block. Writing block can often happen due to being stuck with a current project that the writer is trying to complete. By inserting a completely random paragraph from which to begin, it can take down some of the issues that may have been causing the writers' block in the first place.\r\n<p>\r\nBeginning Writing Routine\r\nAnother productive way to use this tool to begin a daily writing routine. One way is to generate a random paragraph with the intention to try to rewrite it while still keeping the original meaning. The purpose here is to just get the writing started so that when the writer goes onto their day's writing projects, words are already flowing from their fingers.\r\n</p>\r\nWriting Challenge\r\nAnother writing challenge can be to take the individual sentences in the random paragraph and incorporate a single sentence from that into a new paragraph to create a short story. Unlike the random sentence generator, the sentences from the random paragraph will have some connection to one another so it will be a bit different. You also won't know exactly how many sentences will appear in the random paragraph.\r\n</p>\r\n<p>\r\nProgrammers\r\nIt's not only writers who can benefit from this free online tool. If you're a programmer who's working on a project where blocks of text are needed, this tool can be a great way to get that. It's a good way to test your programming and that the tool being created is working well.\r\n\r\nAbove are a few examples of how the random paragraph generator can be beneficial. The best way to see if this random paragraph picker will be useful for your intended purposes is to give it a try. Generate a number of paragraphs to see if they are beneficial to your current project.\r\n\r\nIf you do find this paragraph tool useful, please do us a favor and let us know how you're using it. It's greatly beneficial for us to know the different ways this tool is being used so we can improve it with updates. This is especially true since there are times when the generators we create get used in completely unanticipated ways from when we initially created them. If you have the time, please send us a quick note on what you'd like to see changed or added to make it better in the future.\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About","import React from 'react'\r\n\r\nfunction Contact(){\r\n    return(\r\n        <div>\r\n            <h3>Contact Us</h3>\r\n            <p>\r\n            Generating random paragraphs can be an excellent way for writers to get their creative flow going at the beginning of the day. The writer has no idea what topic the random paragraph will be about when it appears. This forces the writer to use creativity to complete one of three common writing challenges. The writer can use the paragraph as the first one of a short story and build upon it. A second option is to use the random paragraph somewhere in a short story they create. The third option is to have the random paragraph be the ending paragraph in a short story. No matter which of these challenges is undertaken, the writer is forced to use creativity to incorporate the paragraph into their writing.\r\n\r\nTackle Writers' Block\r\nA random paragraph can also be an excellent way for a writer to tackle writers' block. Writing block can often happen due to being stuck with a current project that the writer is trying to complete. By inserting a completely random paragraph from which to begin, it can take down some of the issues that may have been causing the writers' block in the first place.\r\n<p>\r\nBeginning Writing Routine\r\nAnother productive way to use this tool to begin a daily writing routine. One way is to generate a random paragraph with the intention to try to rewrite it while still keeping the original meaning. The purpose here is to just get the writing started so that when the writer goes onto their day's writing projects, words are already flowing from their fingers.\r\n</p>\r\nWriting Challenge\r\nAnother writing challenge can be to take the individual sentences in the random paragraph and incorporate a single sentence from that into a new paragraph to create a short story. Unlike the random sentence generator, the sentences from the random paragraph will have some connection to one another so it will be a bit different. You also won't know exactly how many sentences will appear in the random paragraph.\r\n</p>\r\n<p>\r\nProgrammers\r\nIt's not only writers who can benefit from this free online tool. If you're a programmer who's working on a project where blocks of text are needed, this tool can be a great way to get that. It's a good way to test your programming and that the tool being created is working well.\r\n\r\nAbove are a few examples of how the random paragraph generator can be beneficial. The best way to see if this random paragraph picker will be useful for your intended purposes is to give it a try. Generate a number of paragraphs to see if they are beneficial to your current project.\r\n\r\nIf you do find this paragraph tool useful, please do us a favor and let us know how you're using it. It's greatly beneficial for us to know the different ways this tool is being used so we can improve it with updates. This is especially true since there are times when the generators we create get used in completely unanticipated ways from when we initially created them. If you have the time, please send us a quick note on what you'd like to see changed or added to make it better in the future.\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact","import React from 'react'\r\n\r\nfunction Home(){\r\n    return(\r\n        <div>\r\n            <h3>Home Page</h3>\r\n            <p>\r\n            Generating random paragraphs can be an excellent way for writers to get their creative flow going at the beginning of the day. The writer has no idea what topic the random paragraph will be about when it appears. This forces the writer to use creativity to complete one of three common writing challenges. The writer can use the paragraph as the first one of a short story and build upon it. A second option is to use the random paragraph somewhere in a short story they create. The third option is to have the random paragraph be the ending paragraph in a short story. No matter which of these challenges is undertaken, the writer is forced to use creativity to incorporate the paragraph into their writing.\r\n\r\nTackle Writers' Block\r\nA random paragraph can also be an excellent way for a writer to tackle writers' block. Writing block can often happen due to being stuck with a current project that the writer is trying to complete. By inserting a completely random paragraph from which to begin, it can take down some of the issues that may have been causing the writers' block in the first place.\r\n<p>\r\nBeginning Writing Routine\r\nAnother productive way to use this tool to begin a daily writing routine. One way is to generate a random paragraph with the intention to try to rewrite it while still keeping the original meaning. The purpose here is to just get the writing started so that when the writer goes onto their day's writing projects, words are already flowing from their fingers.\r\n</p>\r\nWriting Challenge\r\nAnother writing challenge can be to take the individual sentences in the random paragraph and incorporate a single sentence from that into a new paragraph to create a short story. Unlike the random sentence generator, the sentences from the random paragraph will have some connection to one another so it will be a bit different. You also won't know exactly how many sentences will appear in the random paragraph.\r\n</p>\r\n<p>\r\nProgrammers\r\nIt's not only writers who can benefit from this free online tool. If you're a programmer who's working on a project where blocks of text are needed, this tool can be a great way to get that. It's a good way to test your programming and that the tool being created is working well.\r\n\r\nAbove are a few examples of how the random paragraph generator can be beneficial. The best way to see if this random paragraph picker will be useful for your intended purposes is to give it a try. Generate a number of paragraphs to see if they are beneficial to your current project.\r\n\r\nIf you do find this paragraph tool useful, please do us a favor and let us know how you're using it. It's greatly beneficial for us to know the different ways this tool is being used so we can improve it with updates. This is especially true since there are times when the generators we create get used in completely unanticipated ways from when we initially created them. If you have the time, please send us a quick note on what you'd like to see changed or added to make it better in the future.\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Home","import React, { useState } from \"react\"\r\nimport { useHistory } from \"react-router-dom\"\r\n\r\n\r\nfunction Login(){\r\n    const IsLoggedIn=()=>{\r\n        const history=useHistory()\r\n        const email=localStorage.getItem('email')\r\n        const token=localStorage.getItem('token')\r\n        if(email!=null && token!=null){\r\n            history.push('/account/')\r\n        }\r\n    }\r\n    IsLoggedIn()\r\n\r\n    const [email,setEmail]=useState('')\r\n    const [password,setPassword]=useState('')\r\n    const [message,setMessage]=useState(false)\r\n    const history=useHistory()\r\n    const submitHandler=(e)=>{\r\n        e.preventDefault()\r\n        console.log(`Login Request Initiated: ${email} ${password}`)\r\n        const myData={\r\n            'email':email,\r\n            'password':password\r\n        }\r\n        fetch(\"http://localhost:8080/api/login/\",\r\n            {\r\n                method:'POST',\r\n                headers:{\r\n                    'Content-Type':'application/json'\r\n                },\r\n                body:JSON.stringify(myData)\r\n            }\r\n        ).then((result)=>{\r\n           if(result.status===401){\r\n               console.log(\"Unauthorized user\")\r\n               return\r\n           }\r\n           return result.json()\r\n        }).then((result)=>{\r\n            if(Object.keys(result).length===0){\r\n                setMessage(\"Authentication Failed\")\r\n            }else{\r\n                localStorage.setItem('token',result.token)\r\n                localStorage.setItem('email',result.email)\r\n                console.log(`The result is: ${result.token} ${result.email}`)\r\n                // history.push('/account')\r\n                window.location.reload()\r\n            }\r\n        }).catch((err)=>{\r\n            console.log(err)\r\n            setMessage(\"Network Error\")\r\n        })\r\n    }\r\n    return(\r\n        <div>\r\n            <h3>Login into your account</h3>\r\n            <form onSubmit={submitHandler} method=\"POST\">\r\n                <input type=\"email\" value={email} onChange={(e)=>setEmail(e.target.value)} className=\"i1\" placeholder=\"Email Id\" required/>\r\n                <input type=\"password\" value={password} onChange={(e)=>{setPassword(e.target.value)}} className=\"i1\" placeholder=\"Password\" required/>\r\n                <button type=\"submit\" className=\"b1 btn-primary\">Login</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login","import React, { useEffect, useState } from 'react'\r\nimport {useHistory} from \"react-router-dom\"\r\nfunction Signup(){\r\n    const history=useHistory()\r\n    const IsLoggedIn=()=>{\r\n        const history=useHistory()\r\n        const email=localStorage.getItem('email')\r\n        const token=localStorage.getItem('token')\r\n        if(email!=null && token!=null){\r\n            history.push('/account/')\r\n            console.log(\"Userrrr\")\r\n        }else{\r\n            console.log(\"blashs\")\r\n        }\r\n    }\r\n    IsLoggedIn()\r\n\r\n    const[fName,setFName]=useState('')\r\n    const[lName,setLName]=useState('')\r\n    const[email,setEmail]=useState('')\r\n    const[password,setPassword]=useState('')\r\n\r\n    const formHandler=(e)=>{\r\n        e.preventDefault()\r\n        const signupData={\r\n            'fName':fName,\r\n            'lName':lName,\r\n            'email':email,\r\n            'password':password\r\n        }\r\n        fetch('http://localhost:8080/api/signup/',{\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type':'application/json'\r\n            },\r\n            body:JSON.stringify(signupData)\r\n        }).then((result)=>{\r\n            console.log(result)\r\n            return result.json()\r\n        }).then((result)=>{\r\n            console.log(result)\r\n            history.push('/login/')\r\n        })\r\n        .catch((err)=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h3>Create an account</h3>\r\n            <form method=\"POST\" onSubmit={formHandler}>\r\n                <input type=\"text\" placeholder=\"First Name\" className=\"i1\" value={fName} onChange={(e)=>setFName(e.target.value)} required/>\r\n                <input type=\"text\" placeholder=\"Last Name\" className=\"i1\" value={lName} onChange={(e)=>setLName(e.target.value)} required/>\r\n                <input type=\"email\" placeholder=\"Email Id\" className=\"i1\" value={email} onChange={(e)=>setEmail(e.target.value)} required/>\r\n                <input type=\"password\" placeholder=\"Password\" className=\"i1\" value={password} onChange={(e)=>setPassword(e.target.value)} required/>\r\n                <button type=\"submit\" className=\"btn-primary b1\">Sign Up</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signup","import React from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nfunction Account(){\r\n    const history=useHistory()\r\n    const isLoggedIn=()=>{\r\n        const email=localStorage.getItem('email')\r\n        const token=localStorage.getItem('token')\r\n        if(email!=null && token!=null){\r\n            fetch(\"http://localhost:8080/api/authentication/\",{\r\n                method:'POST',\r\n                headers:{\r\n                    'Content-Type':'Application/JSON'\r\n                },\r\n                body:JSON.stringify({email:email,token:token})\r\n            }).then((result)=>{\r\n                if(result.status===401){\r\n                    localStorage.removeItem('email')\r\n                    localStorage.removeItem('token')\r\n                    history.push('/login')\r\n                }\r\n            }).catch((err)=>{\r\n                localStorage.removeItem('email')\r\n                localStorage.removeItem('token')\r\n                history.push('/login')\r\n                console.log(err)\r\n            })\r\n        }else{\r\n            console.log(\"No data found\")\r\n            history.push('/login')\r\n        }\r\n    }\r\n    isLoggedIn()\r\n    return(\r\n        <div>\r\n            <h3>Your acccount information is as follows</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Account","import React, { useState } from 'react'\nimport About from './About'\nimport Contact from './Contact'\nimport Home from './Home'\nimport Login from './Login'\nimport Signup from './Signup'\nimport Account from './Account'\nimport {useHistory} from 'react-router-dom'\nimport \"./bootstrap.css\"\nimport \"./App.css\"\nimport {BrowserRouter, Switch,Route,Link} from 'react-router-dom'\nfunction App() {\n  const history=useHistory()\n\n  const isLoggedIn=()=>{\n    const email=localStorage.getItem('email')\n    const token=localStorage.getItem('token')\n    if(email!=null && token!=null){\n      console.log(\"User Logged In\")\n      return true\n    }else{\n      console.log(\"User not Logged In\")\n      return false\n    }\n  }\n  \n  const loginStatus=isLoggedIn()\n\n  const logoutHandler=(e)=>{\n    // e.preventDefault()\n    localStorage.removeItem('email')\n    localStorage.removeItem('token')\n    console.log(\"User logged out successfully\")\n    window.location.reload();\n    // history.push('/login/')\n  }\n\n  return (\n    <BrowserRouter>\n      <div className=\"container-flex\">\n        <header>\n          <nav className=\"navbar\">\n            <ul>\n              <li><Link to=\"/\" className=\"text-white\">Home</Link></li>\n              <li><Link to=\"/about\" className=\"text-white\">About</Link></li>\n              <li><Link to=\"/contact\" className=\"text-white\">Contact</Link></li>\n            </ul>\n              {loginStatus?<p></p>:<Link to=\"/login/\" className=\"float-right text-white text-decoration-none\">Login</Link>}\n              {loginStatus?<p></p>:<Link to=\"/signup/\" className=\"float-right text-white text-decoration-none\">Signup</Link>}\n              {loginStatus?<Link to=\"/account/\" className=\"float-right text-white text-decoration-none\">Account</Link>:<p></p>}\n              {loginStatus?<Link className=\"float-right text-white text-decoration-none\" onClick={logoutHandler}>Logout</Link>:<p></p>}\n          </nav>\n        </header>\n\n        <main className=\"container-flex\">\n          <div className=\"homecont\">\n            <Switch>\n              <Route exact path=\"/\">\n                <Home/>\n              </Route>\n              <Route path=\"/about\">\n                <About/>\n              </Route>\n              <Route path=\"/contact\">\n                <Contact/>\n              </Route>\n              <Route path=\"/login\">\n                <Login/>'\n              </Route>\n              <Route path=\"/signup\">\n                <Signup/>\n              </Route>\n              <Route path=\"/account\">\n                <Account/>\n              </Route>\n            </Switch>\n          </div>\n        </main>\n        \n      <footer className=\"container-flex\">\n        <div className=\"footerdiv\">\n        <p>@All rights reserved</p>\n        </div>\n      </footer>\n      </div>\n    </BrowserRouter>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}